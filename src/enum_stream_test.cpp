// auto-generated by parse-doxygen-xml.py
#include "test_global.hpp"
#include <orcus/css_types.hpp>
#include <orcus/dom_tree.hpp>
#include <orcus/json_document_tree.hpp>
#include <orcus/json_parser_thread.hpp>
#include <orcus/sax_token_parser_thread.hpp>
#include <orcus/spreadsheet/types.hpp>
#include <orcus/spreadsheet/view_types.hpp>
#include <orcus/types.hpp>

using orcus::test::verify_stream_value;

void test_orcus_character_set_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::character_set_t::unspecified, "unspecified"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::adobe_standard_encoding, "adobe-standard-encoding"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::adobe_symbol_encoding, "adobe-symbol-encoding"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::amiga_1251, "amiga-1251"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ansi_x3_110_1983, "ansi-x3-110-1983"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::asmo_449, "asmo-449"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::big5, "big5"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::big5_hkscs, "big5-hkscs"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::bocu_1, "bocu-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::brf, "brf"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::bs_4730, "bs-4730"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::bs_viewdata, "bs-viewdata"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::cesu_8, "cesu-8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::cp50220, "cp50220"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::cp51932, "cp51932"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::csa_z243_4_1985_1, "csa-z243-4-1985-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::csa_z243_4_1985_2, "csa-z243-4-1985-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::csa_z243_4_1985_gr, "csa-z243-4-1985-gr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::csn_369103, "csn-369103"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::dec_mcs, "dec-mcs"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::din_66003, "din-66003"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::dk_us, "dk-us"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ds_2089, "ds-2089"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_at_de, "ebcdic-at-de"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_at_de_a, "ebcdic-at-de-a"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_ca_fr, "ebcdic-ca-fr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_dk_no, "ebcdic-dk-no"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_dk_no_a, "ebcdic-dk-no-a"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_es, "ebcdic-es"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_es_a, "ebcdic-es-a"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_es_s, "ebcdic-es-s"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_fi_se, "ebcdic-fi-se"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_fi_se_a, "ebcdic-fi-se-a"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_fr, "ebcdic-fr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_it, "ebcdic-it"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_pt, "ebcdic-pt"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_uk, "ebcdic-uk"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ebcdic_us, "ebcdic-us"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ecma_cyrillic, "ecma-cyrillic"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::es, "es"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::es2, "es2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::euc_jp, "euc-jp"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::euc_kr, "euc-kr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::extended_unix_code_fixed_width_for_japanese, "extended-unix-code-fixed-width-for-japanese"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gb18030, "gb18030"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gb2312, "gb2312"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gb_1988_80, "gb-1988-80"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gb_2312_80, "gb-2312-80"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gbk, "gbk"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::gost_19768_74, "gost-19768-74"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::greek7, "greek7"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::greek7_old, "greek7-old"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::greek_ccitt, "greek-ccitt"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hp_desktop, "hp-desktop"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hp_legal, "hp-legal"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hp_math8, "hp-math8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hp_pi_font, "hp-pi-font"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hp_roman8, "hp-roman8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::hz_gb_2312, "hz-gb-2312"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm00858, "ibm00858"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm00924, "ibm00924"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01140, "ibm01140"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01141, "ibm01141"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01142, "ibm01142"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01143, "ibm01143"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01144, "ibm01144"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01145, "ibm01145"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01146, "ibm01146"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01147, "ibm01147"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01148, "ibm01148"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm01149, "ibm01149"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm037, "ibm037"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm038, "ibm038"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm1026, "ibm1026"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm1047, "ibm1047"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm273, "ibm273"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm274, "ibm274"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm275, "ibm275"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm277, "ibm277"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm278, "ibm278"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm280, "ibm280"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm281, "ibm281"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm284, "ibm284"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm285, "ibm285"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm290, "ibm290"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm297, "ibm297"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm420, "ibm420"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm423, "ibm423"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm424, "ibm424"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm437, "ibm437"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm500, "ibm500"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm775, "ibm775"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm850, "ibm850"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm851, "ibm851"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm852, "ibm852"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm855, "ibm855"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm857, "ibm857"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm860, "ibm860"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm861, "ibm861"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm862, "ibm862"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm863, "ibm863"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm864, "ibm864"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm865, "ibm865"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm866, "ibm866"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm868, "ibm868"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm869, "ibm869"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm870, "ibm870"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm871, "ibm871"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm880, "ibm880"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm891, "ibm891"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm903, "ibm903"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm904, "ibm904"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm905, "ibm905"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm918, "ibm918"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm_symbols, "ibm-symbols"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ibm_thai, "ibm-thai"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iec_p27_1, "iec-p27-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::inis, "inis"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::inis_8, "inis-8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::inis_cyrillic, "inis-cyrillic"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::invariant, "invariant"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10367_box, "iso-10367-box"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_j_1, "iso-10646-j-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_ucs_2, "iso-10646-ucs-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_ucs_4, "iso-10646-ucs-4"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_ucs_basic, "iso-10646-ucs-basic"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_unicode_latin1, "iso-10646-unicode-latin1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_10646_utf_1, "iso-10646-utf-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_11548_1, "iso-11548-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2022_cn, "iso-2022-cn"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2022_cn_ext, "iso-2022-cn-ext"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2022_jp, "iso-2022-jp"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2022_jp_2, "iso-2022-jp-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2022_kr, "iso-2022-kr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_2033_1983, "iso-2033-1983"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_5427, "iso-5427"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_5427_1981, "iso-5427-1981"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_5428_1980, "iso-5428-1980"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_646_basic_1983, "iso-646-basic-1983"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_646_irv_1983, "iso-646-irv-1983"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_6937_2_25, "iso-6937-2-25"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_6937_2_add, "iso-6937-2-add"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_1, "iso-8859-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_10, "iso-8859-10"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_13, "iso-8859-13"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_14, "iso-8859-14"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_15, "iso-8859-15"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_16, "iso-8859-16"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_1_windows_3_0_latin_1, "iso-8859-1-windows-3-0-latin-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_1_windows_3_1_latin_1, "iso-8859-1-windows-3-1-latin-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_2, "iso-8859-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_2_windows_latin_2, "iso-8859-2-windows-latin-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_3, "iso-8859-3"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_4, "iso-8859-4"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_5, "iso-8859-5"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_6, "iso-8859-6"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_6_e, "iso-8859-6-e"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_6_i, "iso-8859-6-i"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_7, "iso-8859-7"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_8, "iso-8859-8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_8_e, "iso-8859-8-e"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_8_i, "iso-8859-8-i"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_9, "iso-8859-9"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_9_windows_latin_5, "iso-8859-9-windows-latin-5"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_8859_supp, "iso-8859-supp"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_ir_90, "iso-ir-90"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_unicode_ibm_1261, "iso-unicode-ibm-1261"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_unicode_ibm_1264, "iso-unicode-ibm-1264"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_unicode_ibm_1265, "iso-unicode-ibm-1265"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_unicode_ibm_1268, "iso-unicode-ibm-1268"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::iso_unicode_ibm_1276, "iso-unicode-ibm-1276"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::it, "it"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6220_1969_jp, "jis-c6220-1969-jp"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6220_1969_ro, "jis-c6220-1969-ro"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6226_1978, "jis-c6226-1978"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6226_1983, "jis-c6226-1983"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_a, "jis-c6229-1984-a"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_b, "jis-c6229-1984-b"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_b_add, "jis-c6229-1984-b-add"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_hand, "jis-c6229-1984-hand"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_hand_add, "jis-c6229-1984-hand-add"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_c6229_1984_kana, "jis-c6229-1984-kana"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_encoding, "jis-encoding"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_x0201, "jis-x0201"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jis_x0212_1990, "jis-x0212-1990"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jus_i_b1_002, "jus-i-b1-002"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jus_i_b1_003_mac, "jus-i-b1-003-mac"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::jus_i_b1_003_serb, "jus-i-b1-003-serb"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::koi7_switched, "koi7-switched"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::koi8_r, "koi8-r"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::koi8_u, "koi8-u"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ks_c_5601_1987, "ks-c-5601-1987"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ksc5636, "ksc5636"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::kz_1048, "kz-1048"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::latin_greek, "latin-greek"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::latin_greek_1, "latin-greek-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::latin_lap, "latin-lap"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::macintosh, "macintosh"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::microsoft_publishing, "microsoft-publishing"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::mnem, "mnem"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::mnemonic, "mnemonic"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::msz_7795_3, "msz-7795-3"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nats_dano, "nats-dano"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nats_dano_add, "nats-dano-add"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nats_sefi, "nats-sefi"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nats_sefi_add, "nats-sefi-add"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nc_nc00_10_81, "nc-nc00-10-81"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nf_z_62_010, "nf-z-62-010"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::nf_z_62_010_1973, "nf-z-62-010-1973"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ns_4551_1, "ns-4551-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ns_4551_2, "ns-4551-2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::osd_ebcdic_df03_irv, "osd-ebcdic-df03-irv"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::osd_ebcdic_df04_1, "osd-ebcdic-df04-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::osd_ebcdic_df04_15, "osd-ebcdic-df04-15"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::pc8_danish_norwegian, "pc8-danish-norwegian"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::pc8_turkish, "pc8-turkish"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::pt, "pt"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::pt2, "pt2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ptcp154, "ptcp154"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::scsu, "scsu"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::sen_850200_b, "sen-850200-b"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::sen_850200_c, "sen-850200-c"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::shift_jis, "shift-jis"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::t_101_g2, "t-101-g2"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::t_61_7bit, "t-61-7bit"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::t_61_8bit, "t-61-8bit"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::tis_620, "tis-620"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::tscii, "tscii"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::unicode_1_1, "unicode-1-1"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::unicode_1_1_utf_7, "unicode-1-1-utf-7"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::unknown_8bit, "unknown-8bit"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::us_ascii, "us-ascii"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::us_dk, "us-dk"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_16, "utf-16"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_16be, "utf-16be"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_16le, "utf-16le"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_32, "utf-32"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_32be, "utf-32be"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_32le, "utf-32le"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_7, "utf-7"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_7_imap, "utf-7-imap"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::utf_8, "utf-8"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ventura_international, "ventura-international"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ventura_math, "ventura-math"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::ventura_us, "ventura-us"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::videotex_suppl, "videotex-suppl"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::viqr, "viqr"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::viscii, "viscii"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1250, "windows-1250"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1251, "windows-1251"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1252, "windows-1252"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1253, "windows-1253"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1254, "windows-1254"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1255, "windows-1255"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1256, "windows-1256"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1257, "windows-1257"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_1258, "windows-1258"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_31j, "windows-31j"); assert(result); }
    { bool result = verify_stream_value(orcus::character_set_t::windows_874, "windows-874"); assert(result); }
#endif
}

void test_orcus_css_combinator_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::css::combinator_t::descendant, "descendant"); assert(result); }
    { bool result = verify_stream_value(orcus::css::combinator_t::direct_child, "direct-child"); assert(result); }
    { bool result = verify_stream_value(orcus::css::combinator_t::next_sibling, "next-sibling"); assert(result); }
#endif
}

void test_orcus_css_property_function_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::css::property_function_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_function_t::hsl, "hsl"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_function_t::hsla, "hsla"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_function_t::rgb, "rgb"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_function_t::rgba, "rgba"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_function_t::url, "url"); assert(result); }
#endif
}

void test_orcus_css_property_value_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::css::property_value_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::string, "string"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::hsl, "hsl"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::hsla, "hsla"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::rgb, "rgb"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::rgba, "rgba"); assert(result); }
    { bool result = verify_stream_value(orcus::css::property_value_t::url, "url"); assert(result); }
#endif
}

void test_orcus_dom_node_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::dom::node_t::unset, "unset"); assert(result); }
    { bool result = verify_stream_value(orcus::dom::node_t::declaration, "declaration"); assert(result); }
    { bool result = verify_stream_value(orcus::dom::node_t::element, "element"); assert(result); }
#endif
}

void test_orcus_dump_format_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::dump_format_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::check, "check"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::csv, "csv"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::flat, "flat"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::html, "html"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::json, "json"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::xml, "xml"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::yaml, "yaml"); assert(result); }
    { bool result = verify_stream_value(orcus::dump_format_t::debug_state, "debug-state"); assert(result); }
#endif
}

void test_orcus_format_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::format_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::ods, "ods"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::xlsx, "xlsx"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::gnumeric, "gnumeric"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::xls_xml, "xls-xml"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::csv, "csv"); assert(result); }
    { bool result = verify_stream_value(orcus::format_t::parquet, "parquet"); assert(result); }
}

void test_orcus_json_node_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::json::node_t::unset, "unset"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::string, "string"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::number, "number"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::object, "object"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::array, "array"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::boolean_true, "boolean-true"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::boolean_false, "boolean-false"); assert(result); }
    { bool result = verify_stream_value(orcus::json::node_t::null, "null"); assert(result); }
#endif
}

void test_orcus_json_parse_token_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::json::parse_token_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::begin_parse, "begin-parse"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::end_parse, "end-parse"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::begin_array, "begin-array"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::end_array, "end-array"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::begin_object, "begin-object"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::object_key, "object-key"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::end_object, "end-object"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::boolean_true, "boolean-true"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::boolean_false, "boolean-false"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::null, "null"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::string, "string"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::number, "number"); assert(result); }
    { bool result = verify_stream_value(orcus::json::parse_token_t::parse_error, "parse-error"); assert(result); }
#endif
}

void test_orcus_length_unit_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::length_unit_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::centimeter, "centimeter"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::millimeter, "millimeter"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::xlsx_column_digit, "xlsx-column-digit"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::inch, "inch"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::point, "point"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::twip, "twip"); assert(result); }
    { bool result = verify_stream_value(orcus::length_unit_t::pixel, "pixel"); assert(result); }
#endif
}

void test_orcus_sax_parse_token_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::sax::parse_token_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::sax::parse_token_t::start_element, "start-element"); assert(result); }
    { bool result = verify_stream_value(orcus::sax::parse_token_t::end_element, "end-element"); assert(result); }
    { bool result = verify_stream_value(orcus::sax::parse_token_t::characters, "characters"); assert(result); }
    { bool result = verify_stream_value(orcus::sax::parse_token_t::parse_error, "parse-error"); assert(result); }
#endif
}

void test_orcus_spreadsheet_auto_filter_node_op_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_node_op_t::unspecified, "unspecified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_node_op_t::op_and, "op-and"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_node_op_t::op_or, "op-or"); assert(result); }
}

void test_orcus_spreadsheet_auto_filter_op_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::unspecified, "unspecified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::empty, "empty"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::not_empty, "not-empty"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::equal, "equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::not_equal, "not-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::contain, "contain"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::not_contain, "not-contain"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::begin_with, "begin-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::not_begin_with, "not-begin-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::end_with, "end-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::not_end_with, "not-end-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::greater, "greater"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::greater_equal, "greater-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::less, "less"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::less_equal, "less-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::top, "top"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::bottom, "bottom"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::top_percent, "top-percent"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::bottom_percent, "bottom-percent"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::top_percent_range, "top-percent-range"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::auto_filter_op_t::bottom_percent_range, "bottom-percent-range"); assert(result); }
}

void test_orcus_spreadsheet_border_direction_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::top, "top"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::bottom, "bottom"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::left, "left"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::right, "right"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::diagonal, "diagonal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::diagonal_bl_tr, "diagonal-bl-tr"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_direction_t::diagonal_tl_br, "diagonal-tl-br"); assert(result); }
#endif
}

void test_orcus_spreadsheet_border_style_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::solid, "solid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::dash_dot, "dash-dot"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::dash_dot_dot, "dash-dot-dot"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::dashed, "dashed"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::dotted, "dotted"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::double_border, "double-border"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::hair, "hair"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::medium, "medium"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::medium_dash_dot, "medium-dash-dot"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::medium_dash_dot_dot, "medium-dash-dot-dot"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::medium_dashed, "medium-dashed"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::slant_dash_dot, "slant-dash-dot"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::thick, "thick"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::thin, "thin"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::double_thin, "double-thin"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::border_style_t::fine_dashed, "fine-dashed"); assert(result); }
}

void test_orcus_spreadsheet_condition_date_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::today, "today"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::yesterday, "yesterday"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::tomorrow, "tomorrow"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::last_7_days, "last-7-days"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::this_week, "this-week"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::next_week, "next-week"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::last_week, "last-week"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::this_month, "this-month"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::next_month, "next-month"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::last_month, "last-month"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::this_year, "this-year"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::next_year, "next-year"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_date_t::last_year, "last-year"); assert(result); }
#endif
}

void test_orcus_spreadsheet_condition_operator_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::equal, "equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::less, "less"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::greater, "greater"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::greater_equal, "greater-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::less_equal, "less-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::not_equal, "not-equal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::between, "between"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::not_between, "not-between"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::duplicate, "duplicate"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::unique, "unique"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::top_n, "top-n"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::bottom_n, "bottom-n"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::above_average, "above-average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::below_average, "below-average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::above_equal_average, "above-equal-average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::below_equal_average, "below-equal-average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::contains_error, "contains-error"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::contains_no_error, "contains-no-error"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::begins_with, "begins-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::ends_with, "ends-with"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::contains, "contains"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::contains_blanks, "contains-blanks"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::not_contains, "not-contains"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_operator_t::expression, "expression"); assert(result); }
#endif
}

void test_orcus_spreadsheet_condition_type_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::value, "value"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::automatic, "automatic"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::max, "max"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::min, "min"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::formula, "formula"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::percent, "percent"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::condition_type_t::percentile, "percentile"); assert(result); }
#endif
}

void test_orcus_spreadsheet_conditional_format_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::condition, "condition"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::date, "date"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::formula, "formula"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::colorscale, "colorscale"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::databar, "databar"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::conditional_format_t::iconset, "iconset"); assert(result); }
#endif
}

void test_orcus_spreadsheet_data_table_type_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::data_table_type_t::column, "column"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::data_table_type_t::row, "row"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::data_table_type_t::both, "both"); assert(result); }
#endif
}

void test_orcus_spreadsheet_databar_axis_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::databar_axis_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::databar_axis_t::middle, "middle"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::databar_axis_t::automatic, "automatic"); assert(result); }
#endif
}

void test_orcus_spreadsheet_fill_pattern_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::solid, "solid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_down, "dark-down"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_gray, "dark-gray"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_grid, "dark-grid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_horizontal, "dark-horizontal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_trellis, "dark-trellis"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_up, "dark-up"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::dark_vertical, "dark-vertical"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::gray_0625, "gray-0625"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::gray_125, "gray-125"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_down, "light-down"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_gray, "light-gray"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_grid, "light-grid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_horizontal, "light-horizontal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_trellis, "light-trellis"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_up, "light-up"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::light_vertical, "light-vertical"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::fill_pattern_t::medium_gray, "medium-gray"); assert(result); }
#endif
}

void test_orcus_spreadsheet_formula_error_policy_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::formula_error_policy_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_error_policy_t::fail, "fail"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_error_policy_t::skip, "skip"); assert(result); }
#endif
}

void test_orcus_spreadsheet_formula_grammar_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::formula_grammar_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_grammar_t::xls_xml, "xls-xml"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_grammar_t::xlsx, "xlsx"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_grammar_t::ods, "ods"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_grammar_t::gnumeric, "gnumeric"); assert(result); }
}

void test_orcus_spreadsheet_formula_ref_context_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::formula_ref_context_t::global, "global"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_ref_context_t::named_expression_base, "named-expression-base"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_ref_context_t::named_range, "named-range"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_ref_context_t::table_range, "table-range"); assert(result); }
#endif
}

void test_orcus_spreadsheet_formula_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::formula_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_t::array, "array"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_t::data_table, "data-table"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_t::normal, "normal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::formula_t::shared, "shared"); assert(result); }
#endif
}

void test_orcus_spreadsheet_hor_alignment_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::left, "left"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::center, "center"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::right, "right"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::justified, "justified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::distributed, "distributed"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::hor_alignment_t::filled, "filled"); assert(result); }
}

void test_orcus_spreadsheet_pane_state_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pane_state_t::unspecified, "unspecified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pane_state_t::frozen, "frozen"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pane_state_t::split, "split"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pane_state_t::frozen_split, "frozen-split"); assert(result); }
#endif
}

void test_orcus_spreadsheet_pivot_axis_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pivot_axis_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_axis_t::column, "column"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_axis_t::page, "page"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_axis_t::row, "row"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_axis_t::values, "values"); assert(result); }
}

void test_orcus_spreadsheet_pivot_cache_group_by_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::days, "days"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::hours, "hours"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::minutes, "minutes"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::months, "months"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::quarters, "quarters"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::range, "range"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::seconds, "seconds"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_cache_group_by_t::years, "years"); assert(result); }
}

void test_orcus_spreadsheet_pivot_data_show_data_as_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::difference, "difference"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::index, "index"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::normal, "normal"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::percent, "percent"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::percent_diff, "percent-diff"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::percent_of_col, "percent-of-col"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::percent_of_row, "percent-of-row"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::percent_of_total, "percent-of-total"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_show_data_as_t::run_total, "run-total"); assert(result); }
}

void test_orcus_spreadsheet_pivot_data_subtotal_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::average, "average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::count, "count"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::count_numbers, "count-numbers"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::max, "max"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::min, "min"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::product, "product"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::stddev, "stddev"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::stddevp, "stddevp"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::sum, "sum"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::var, "var"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_data_subtotal_t::varp, "varp"); assert(result); }
}

void test_orcus_spreadsheet_pivot_field_item_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::average, "average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::blank_line, "blank-line"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::count, "count"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::count_numbers, "count-numbers"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::data, "data"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::subtotal_default, "subtotal-default"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::grand_total, "grand-total"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::max, "max"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::min, "min"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::product, "product"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::stddev, "stddev"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::stddevp, "stddevp"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::sum, "sum"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::var, "var"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::pivot_field_item_t::varp, "varp"); assert(result); }
}

void test_orcus_spreadsheet_sheet_pane_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::sheet_pane_t::unspecified, "unspecified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::sheet_pane_t::top_left, "top-left"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::sheet_pane_t::top_right, "top-right"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::sheet_pane_t::bottom_left, "bottom-left"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::sheet_pane_t::bottom_right, "bottom-right"); assert(result); }
#endif
}

void test_orcus_spreadsheet_strikethrough_style_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::solid, "solid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::dash, "dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::dot_dash, "dot-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::dot_dot_dash, "dot-dot-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::dotted, "dotted"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::long_dash, "long-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_style_t::wave, "wave"); assert(result); }
}

void test_orcus_spreadsheet_strikethrough_text_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_text_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_text_t::slash, "slash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_text_t::cross, "cross"); assert(result); }
}

void test_orcus_spreadsheet_strikethrough_type_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_type_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_type_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_type_t::single_type, "single-type"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_type_t::double_type, "double-type"); assert(result); }
}

void test_orcus_spreadsheet_strikethrough_width_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::width_auto, "width-auto"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::thin, "thin"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::medium, "medium"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::thick, "thick"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::strikethrough_width_t::bold, "bold"); assert(result); }
}

void test_orcus_spreadsheet_totals_row_function_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::sum, "sum"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::minimum, "minimum"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::maximum, "maximum"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::average, "average"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::count, "count"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::count_numbers, "count-numbers"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::standard_deviation, "standard-deviation"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::variance, "variance"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::totals_row_function_t::custom, "custom"); assert(result); }
#endif
}

void test_orcus_spreadsheet_underline_count_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::underline_count_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_count_t::single_count, "single-count"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_count_t::double_count, "double-count"); assert(result); }
}

void test_orcus_spreadsheet_underline_spacing_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::underline_spacing_t::continuous, "continuous"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_spacing_t::skip_white_space, "skip-white-space"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_spacing_t::continuous_over_field, "continuous-over-field"); assert(result); }
}

void test_orcus_spreadsheet_underline_style_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::solid, "solid"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::dotted, "dotted"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::dash, "dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::long_dash, "long-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::dot_dash, "dot-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::dot_dot_dash, "dot-dot-dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_style_t::wave, "wave"); assert(result); }
}

void test_orcus_spreadsheet_underline_thickness_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::none, "none"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::automatic, "automatic"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::bold, "bold"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::dash, "dash"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::medium, "medium"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::thick, "thick"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::thin, "thin"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::percent, "percent"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::positive_integer, "positive-integer"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::underline_thickness_t::positive_length, "positive-length"); assert(result); }
}

void test_orcus_spreadsheet_ver_alignment_t()
{
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::top, "top"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::middle, "middle"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::bottom, "bottom"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::justified, "justified"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::ver_alignment_t::distributed, "distributed"); assert(result); }
}

void test_orcus_spreadsheet_xf_category_t()
{
#if 0
    ORCUS_TEST_FUNC_SCOPE;

    { bool result = verify_stream_value(orcus::spreadsheet::xf_category_t::unknown, "unknown"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::xf_category_t::cell, "cell"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::xf_category_t::cell_style, "cell-style"); assert(result); }
    { bool result = verify_stream_value(orcus::spreadsheet::xf_category_t::differential, "differential"); assert(result); }
#endif
}


int main()
{
    test_orcus_character_set_t();
    test_orcus_css_combinator_t();
    test_orcus_css_property_function_t();
    test_orcus_css_property_value_t();
    test_orcus_dom_node_t();
    test_orcus_dump_format_t();
    test_orcus_format_t();
    test_orcus_json_node_t();
    test_orcus_json_parse_token_t();
    test_orcus_length_unit_t();
    test_orcus_sax_parse_token_t();
    test_orcus_spreadsheet_auto_filter_node_op_t();
    test_orcus_spreadsheet_auto_filter_op_t();
    test_orcus_spreadsheet_border_direction_t();
    test_orcus_spreadsheet_border_style_t();
    test_orcus_spreadsheet_condition_date_t();
    test_orcus_spreadsheet_condition_operator_t();
    test_orcus_spreadsheet_condition_type_t();
    test_orcus_spreadsheet_conditional_format_t();
    test_orcus_spreadsheet_data_table_type_t();
    test_orcus_spreadsheet_databar_axis_t();
    test_orcus_spreadsheet_fill_pattern_t();
    test_orcus_spreadsheet_formula_error_policy_t();
    test_orcus_spreadsheet_formula_grammar_t();
    test_orcus_spreadsheet_formula_ref_context_t();
    test_orcus_spreadsheet_formula_t();
    test_orcus_spreadsheet_hor_alignment_t();
    test_orcus_spreadsheet_pane_state_t();
    test_orcus_spreadsheet_pivot_axis_t();
    test_orcus_spreadsheet_pivot_cache_group_by_t();
    test_orcus_spreadsheet_pivot_data_show_data_as_t();
    test_orcus_spreadsheet_pivot_data_subtotal_t();
    test_orcus_spreadsheet_pivot_field_item_t();
    test_orcus_spreadsheet_sheet_pane_t();
    test_orcus_spreadsheet_strikethrough_style_t();
    test_orcus_spreadsheet_strikethrough_text_t();
    test_orcus_spreadsheet_strikethrough_type_t();
    test_orcus_spreadsheet_strikethrough_width_t();
    test_orcus_spreadsheet_totals_row_function_t();
    test_orcus_spreadsheet_underline_count_t();
    test_orcus_spreadsheet_underline_spacing_t();
    test_orcus_spreadsheet_underline_style_t();
    test_orcus_spreadsheet_underline_thickness_t();
    test_orcus_spreadsheet_ver_alignment_t();
    test_orcus_spreadsheet_xf_category_t();

    return EXIT_SUCCESS;
}
